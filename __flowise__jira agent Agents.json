{
  "nodes": [
    {
      "id": "startAgentflow_0",
      "type": "agentFlow",
      "position": {
        "x": -337.08766830541754,
        "y": 219.6773633363847
      },
      "data": {
        "id": "startAgentflow_0",
        "label": "Start",
        "version": 1.1,
        "name": "startAgentflow",
        "type": "Start",
        "color": "#7EE787",
        "hideInput": true,
        "baseClasses": [
          "Start"
        ],
        "category": "Agent Flows",
        "description": "Starting point of the agentflow",
        "inputParams": [
          {
            "label": "Input Type",
            "name": "startInputType",
            "type": "options",
            "options": [
              {
                "label": "Chat Input",
                "name": "chatInput",
                "description": "Start the conversation with chat input"
              },
              {
                "label": "Form Input",
                "name": "formInput",
                "description": "Start the workflow with form inputs"
              }
            ],
            "default": "chatInput",
            "id": "startAgentflow_0-input-startInputType-options",
            "display": true
          },
          {
            "label": "Form Title",
            "name": "formTitle",
            "type": "string",
            "placeholder": "Please Fill Out The Form",
            "show": {
              "startInputType": "formInput"
            },
            "id": "startAgentflow_0-input-formTitle-string",
            "display": false
          },
          {
            "label": "Form Description",
            "name": "formDescription",
            "type": "string",
            "placeholder": "Complete all fields below to continue",
            "show": {
              "startInputType": "formInput"
            },
            "id": "startAgentflow_0-input-formDescription-string",
            "display": false
          },
          {
            "label": "Form Input Types",
            "name": "formInputTypes",
            "description": "Specify the type of form input",
            "type": "array",
            "show": {
              "startInputType": "formInput"
            },
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Options",
                    "name": "options"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Label",
                "name": "label",
                "type": "string",
                "placeholder": "Label for the input"
              },
              {
                "label": "Variable Name",
                "name": "name",
                "type": "string",
                "placeholder": "Variable name for the input (must be camel case)",
                "description": "Variable name must be camel case. For example: firstName, lastName, etc."
              },
              {
                "label": "Add Options",
                "name": "addOptions",
                "type": "array",
                "show": {
                  "formInputTypes[$index].type": "options"
                },
                "array": [
                  {
                    "label": "Option",
                    "name": "option",
                    "type": "string"
                  }
                ]
              }
            ],
            "id": "startAgentflow_0-input-formInputTypes-array",
            "display": false
          },
          {
            "label": "Ephemeral Memory",
            "name": "startEphemeralMemory",
            "type": "boolean",
            "description": "Start fresh for every execution without past chat history",
            "optional": true,
            "id": "startAgentflow_0-input-startEphemeralMemory-boolean",
            "display": true
          },
          {
            "label": "Flow State",
            "name": "startState",
            "description": "Runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "placeholder": "Foo"
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "placeholder": "Bar",
                "optional": true
              }
            ],
            "id": "startAgentflow_0-input-startState-array",
            "display": true
          },
          {
            "label": "Persist State",
            "name": "startPersistState",
            "type": "boolean",
            "description": "Persist the state in the same session",
            "optional": true,
            "id": "startAgentflow_0-input-startPersistState-boolean",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "startInputType": "chatInput",
          "startEphemeralMemory": "",
          "startState": [
            {
              "key": "answer",
              "value": ""
            }
          ],
          "startPersistState": false
        },
        "outputAnchors": [
          {
            "id": "startAgentflow_0-output-startAgentflow",
            "label": "Start",
            "name": "startAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 104,
      "height": 66,
      "positionAbsolute": {
        "x": -337.08766830541754,
        "y": 219.6773633363847
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "agentAgentflow_0",
      "position": {
        "x": -162.33479430785005,
        "y": 200.62165336230245
      },
      "data": {
        "id": "agentAgentflow_0",
        "label": "Agent 0",
        "version": 1,
        "name": "agentAgentflow",
        "type": "Agent",
        "color": "#4DD0E1",
        "baseClasses": [
          "Agent"
        ],
        "category": "Agent Flows",
        "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
        "inputParams": [
          {
            "label": "Model",
            "name": "agentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "agentAgentflow_0-input-agentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "agentMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "agentAgentflow_0-input-agentMessages-array",
            "display": true
          },
          {
            "label": "Tools",
            "name": "agentTools",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Tool",
                "name": "agentSelectedTool",
                "type": "asyncOptions",
                "loadMethod": "listTools",
                "loadConfig": true
              },
              {
                "label": "Require Human Input",
                "name": "agentSelectedToolRequiresHumanInput",
                "type": "boolean",
                "optional": true
              }
            ],
            "id": "agentAgentflow_0-input-agentTools-array",
            "display": true
          },
          {
            "label": "Knowledge (Document Stores)",
            "name": "agentKnowledgeDocumentStores",
            "type": "array",
            "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
            "array": [
              {
                "label": "Document Store",
                "name": "documentStore",
                "type": "asyncOptions",
                "loadMethod": "listStores"
              },
              {
                "label": "Describe Knowledge",
                "name": "docStoreDescription",
                "type": "string",
                "generateDocStoreDescription": true,
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_0-input-agentKnowledgeDocumentStores-array",
            "display": true
          },
          {
            "label": "Knowledge (Vector Embeddings)",
            "name": "agentKnowledgeVSEmbeddings",
            "type": "array",
            "description": "Give your agent context about different document sources from existing vector stores and embeddings",
            "array": [
              {
                "label": "Vector Store",
                "name": "vectorStore",
                "type": "asyncOptions",
                "loadMethod": "listVectorStores",
                "loadConfig": true
              },
              {
                "label": "Embedding Model",
                "name": "embeddingModel",
                "type": "asyncOptions",
                "loadMethod": "listEmbeddings",
                "loadConfig": true
              },
              {
                "label": "Knowledge Name",
                "name": "knowledgeName",
                "type": "string",
                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
              },
              {
                "label": "Describe Knowledge",
                "name": "knowledgeDescription",
                "type": "string",
                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                "rows": 4
              },
              {
                "label": "Return Source Documents",
                "name": "returnSourceDocuments",
                "type": "boolean",
                "optional": true
              }
            ],
            "optional": true,
            "id": "agentAgentflow_0-input-agentKnowledgeVSEmbeddings-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "agentEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "agentAgentflow_0-input-agentEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "agentMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_0-input-agentMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "agentMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "agentMemoryType": "windowSize"
            },
            "id": "agentAgentflow_0-input-agentMemoryWindowSize-number",
            "display": true
          },
          {
            "label": "Max Token Limit",
            "name": "agentMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "agentMemoryType": "conversationSummaryBuffer"
            },
            "id": "agentAgentflow_0-input-agentMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "agentUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "agentEnableMemory": true
            },
            "id": "agentAgentflow_0-input-agentUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "agentReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "agentAgentflow_0-input-agentReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "agentUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "agentAgentflow_0-input-agentUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "agentModel": "chatOllama",
          "agentMessages": [
            {
              "role": "system",
              "content": "<p>You are a professional assistant that helps users interact with Atlassian services (Jira, Confluence) through the <code>custom mcp tool </code>tool.</p><p>Your sole responsibility is to accurately interpret Korean-language user requests and convert them into precise tool invocations using the provided API functions in <code>custom mcp tool</code>.</p><p>---</p><p>🔹 LANGUAGE RULE:</p><p>- All <strong>user queries are in Korean</strong>.</p><p>- All <strong>your responses must also be in Korean</strong>.</p><p>- However, you must strictly follow the tool specifications written in English (OpenAPI schema) when invoking tools.</p><p>- You must not translate user questions into English for answering. Only the internal tool usage should follow English specifications.</p><p>---</p><p>🔹 TOOL USAGE RULES:</p><p>1. You must always use the <code>custom mcp tool </code>tool to fulfill user requests. Never respond directly or assume the answer.</p><p>2. All information must be retrieved via tool calls such as:</p><p>   - Jira: issue search, view, create, update, transition, comment, assign</p><p>   - Confluence: page search, read, create, update, comment</p><p>3. Always strictly follow the <strong>OpenAPI schema</strong>:</p><p>   - Use exact field names and data types as defined.</p><p>   ⚠️ Pay special attention to the <code>transition_id</code> field:</p><p>   - It must always be passed as a <strong>string</strong>, even if it looks like a number (e.g., 21).</p><p>   - The value must be enclosed in double quotes to match the schema requirement.</p><p>   - ❌ Never pass raw numbers like <code>21</code> or <code>30</code>. These will fail validation.</p><p>   - ✅ Always pass: <code>\"transition_id\": \"21\"</code> (a string in quotes, not a number).</p><p>   - Remember: the receiving tool checks types strictly. Numbers will be rejected.</p><p>   - If you are unsure, treat <strong>all ID fields as strings</strong> to be safe.</p><p>   - Example:</p><p>     ```json</p><p>     {</p><p>       \"issue_key\": \"TEST-4\",</p><p>       \"transition_id\": \"21\"</p><p>     }</p><p>     ```</p><p>   - This is a common error. Be precise and always prefer string format when calling <code>jira_transition_issue</code>.</p><p>4. Never attempt to update or transition an issue unless the current value is different from the requested value:</p><p>   - First, call <code>jira_get_issue</code> to retrieve the current status.</p><p>   - If the value is already the same as the one requested, do not perform any update.</p><p>   - Instead, inform the user in Korean that no change was necessary.</p><p>5. When searching by labels or other metadata, make sure to include the necessary field (e.g., <code>labels</code>) in the <code>fields</code> parameter.</p><p>   - Otherwise, label information will not be visible in the response, even if it exists.</p><p>6. When constructing JQL queries based on user questions:</p><p>   - Always include the <strong>original Korean keyword</strong> from the user's question <strong>and its English translation</strong> in the search condition.</p><p>   - For example, if the user asks about \"네트워크\", also include \"network\" in the search condition.</p><p>   - Your JQL should cover both terms using <code>OR</code>, like:</p><p>     ```</p><p>     summary ~ \"네트워크\" OR summary ~ \"network\" OR description ~ \"네트워크\" OR description ~ \"network\"</p><p>     ```</p><p>   - Also include <code>comment</code> as a searchable field:</p><p>     ```</p><p>     OR comment ~ \"네트워크\" OR comment ~ \"network\"</p><p>     ```</p><p>   - This ensures the results include issues with matching labels, summaries, descriptions, and comments.</p><p>7. If multiple steps are required, perform each tool call in order and summarize the result in Korean.</p><p>8. Never guess, hardcode, or fabricate any data. Only respond based on tool results.</p><p>---</p><p>🔹 EXAMPLE:</p><p>- User says: \"TEST-4 이슈의 상태를 '진행중'으로 바꿔줘\"</p><p>→ You must:</p><p>   1. Call <code>jira_get_issue</code> to retrieve the current status.</p><p>   2. If the status is already \"진행중\", reply: \"현재 상태가 이미 '진행중'입니다. 변경하지 않았습니다.\"</p><p>   3. If different, call <code>jira_get_transitions</code> to get the correct <code>transition_id</code>.</p><p>   4. Use the string type for <code>transition_id</code>, e.g., <code>\"21\"</code> — never a number.</p><p>   5. Call <code>jira_transition_issue</code> with that string ID.</p><p>   6. Respond to the user in Korean.</p><p>---</p><p>You are not a chatbot. You are a structured task agent that connects Korean-language user requests to real actions using the <code>custom mcp tool </code>API.</p><p></p>"
            }
          ],
          "agentTools": [
            {
              "agentSelectedTool": "customMCP",
              "agentSelectedToolRequiresHumanInput": false,
              "agentSelectedToolConfig": {
                "mcpServerConfig": "{\n  \"url\": \"http://jira-mcp-server:8000/mcp\",\n    \"headers\": {\n    \"Authorization\": \"Token {{$vars.atlassian_token}}\"\n}\n}",
                "mcpActions": "[\"jira_get_all_projects\",\"jira_get_board_issues\",\"jira_get_issue\",\"jira_get_project_issues\",\"jira_get_transitions\",\"jira_get_user_profile\",\"jira_search\",\"jira_search_fields\",\"jira_transition_issue\"]",
                "agentSelectedTool": "customMCP"
              }
            }
          ],
          "agentKnowledgeDocumentStores": "",
          "agentKnowledgeVSEmbeddings": "",
          "agentEnableMemory": true,
          "agentMemoryType": "windowSize",
          "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>",
          "agentReturnResponseAs": "userMessage",
          "agentUpdateState": [
            {
              "key": "answer",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ],
          "agentModelConfig": {
            "baseUrl": "http://ollama:11434",
            "modelName": "qwen3:14b",
            "temperature": "0.1",
            "allowImageUploads": "",
            "streaming": false,
            "jsonMode": "",
            "keepAlive": "",
            "topP": "",
            "topK": "",
            "mirostat": "",
            "mirostatEta": "",
            "mirostatTau": "",
            "numCtx": "32768",
            "numGpu": "",
            "numThread": "",
            "repeatLastN": "",
            "repeatPenalty": "",
            "stop": "",
            "tfsZ": "",
            "agentModel": "chatOllama"
          },
          "agentMemoryWindowSize": "5",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "agentAgentflow_0-output-agentAgentflow",
            "label": "Agent",
            "name": "agentAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 169,
      "height": 100,
      "selected": false,
      "positionAbsolute": {
        "x": -162.33479430785005,
        "y": 200.62165336230245
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_0",
      "position": {
        "x": 1245.9110994227174,
        "y": 220.82963496886117
      },
      "data": {
        "id": "directReplyAgentflow_0",
        "label": "Direct Reply 0",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_0-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_1\" data-label=\"customFunctionAgentflow_1\">{{ customFunctionAgentflow_1 }}</span> </p>",
          "undefined": ""
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 167,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1245.9110994227174,
        "y": 220.82963496886117
      },
      "dragging": false
    },
    {
      "id": "httpAgentflow_0",
      "position": {
        "x": 300.9340226747459,
        "y": 46.79399150129426
      },
      "data": {
        "id": "httpAgentflow_0",
        "label": "Check presidio",
        "version": 1.1,
        "name": "httpAgentflow",
        "type": "HTTP",
        "color": "#FF7F7F",
        "baseClasses": [
          "HTTP"
        ],
        "category": "Agent Flows",
        "description": "Send a HTTP request",
        "inputParams": [
          {
            "label": "HTTP Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "httpBasicAuth",
              "httpBearerToken",
              "httpApiKey"
            ],
            "optional": true,
            "id": "httpAgentflow_0-input-credential-credential",
            "display": true
          },
          {
            "label": "Method",
            "name": "method",
            "type": "options",
            "options": [
              {
                "label": "GET",
                "name": "GET"
              },
              {
                "label": "POST",
                "name": "POST"
              },
              {
                "label": "PUT",
                "name": "PUT"
              },
              {
                "label": "DELETE",
                "name": "DELETE"
              },
              {
                "label": "PATCH",
                "name": "PATCH"
              }
            ],
            "default": "GET",
            "id": "httpAgentflow_0-input-method-options",
            "display": true
          },
          {
            "label": "URL",
            "name": "url",
            "type": "string",
            "id": "httpAgentflow_0-input-url-string",
            "display": true
          },
          {
            "label": "Headers",
            "name": "headers",
            "type": "array",
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "default": ""
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "default": "",
                "acceptVariable": true
              }
            ],
            "optional": true,
            "id": "httpAgentflow_0-input-headers-array",
            "display": true
          },
          {
            "label": "Query Params",
            "name": "queryParams",
            "type": "array",
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "default": ""
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "default": "",
                "acceptVariable": true
              }
            ],
            "optional": true,
            "id": "httpAgentflow_0-input-queryParams-array",
            "display": true
          },
          {
            "label": "Body Type",
            "name": "bodyType",
            "type": "options",
            "options": [
              {
                "label": "JSON",
                "name": "json"
              },
              {
                "label": "Raw",
                "name": "raw"
              },
              {
                "label": "Form Data",
                "name": "formData"
              },
              {
                "label": "x-www-form-urlencoded",
                "name": "xWwwFormUrlencoded"
              }
            ],
            "optional": true,
            "id": "httpAgentflow_0-input-bodyType-options",
            "display": true
          },
          {
            "label": "Body",
            "name": "body",
            "type": "string",
            "acceptVariable": true,
            "rows": 4,
            "show": {
              "bodyType": [
                "raw",
                "json"
              ]
            },
            "optional": true,
            "id": "httpAgentflow_0-input-body-string",
            "display": true
          },
          {
            "label": "Body",
            "name": "body",
            "type": "array",
            "acceptVariable": true,
            "show": {
              "bodyType": [
                "xWwwFormUrlencoded",
                "formData"
              ]
            },
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "default": ""
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "default": "",
                "acceptVariable": true
              }
            ],
            "optional": true,
            "id": "httpAgentflow_0-input-body-array",
            "display": false
          },
          {
            "label": "Response Type",
            "name": "responseType",
            "type": "options",
            "options": [
              {
                "label": "JSON",
                "name": "json"
              },
              {
                "label": "Text",
                "name": "text"
              },
              {
                "label": "Array Buffer",
                "name": "arraybuffer"
              },
              {
                "label": "Raw (Base64)",
                "name": "base64"
              }
            ],
            "optional": true,
            "id": "httpAgentflow_0-input-responseType-options",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "method": "POST",
          "url": "http://presidio-kor-analyzer:3000/analyze",
          "headers": [
            {
              "key": "Content-Type",
              "value": "<p>application/json</p>"
            }
          ],
          "queryParams": [],
          "bodyType": "raw",
          "responseType": "json",
          "body": "<p>{</p><p>\"text\": \"<span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_0\" data-label=\"customFunctionAgentflow_0\">{{ customFunctionAgentflow_0 }}</span>\",</p><p>\"language\": \"ko\"</p><p>}</p>",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "httpAgentflow_0-output-httpAgentflow",
            "label": "HTTP",
            "name": "httpAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 173,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 300.9340226747459,
        "y": 46.79399150129426
      },
      "dragging": false
    },
    {
      "id": "httpAgentflow_1",
      "position": {
        "x": 530.1297807354258,
        "y": 46.46026605555231
      },
      "data": {
        "id": "httpAgentflow_1",
        "label": "Convert presidio",
        "version": 1.1,
        "name": "httpAgentflow",
        "type": "HTTP",
        "color": "#FF7F7F",
        "baseClasses": [
          "HTTP"
        ],
        "category": "Agent Flows",
        "description": "Send a HTTP request",
        "inputParams": [
          {
            "label": "HTTP Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "httpBasicAuth",
              "httpBearerToken",
              "httpApiKey"
            ],
            "optional": true,
            "id": "httpAgentflow_1-input-credential-credential",
            "display": true
          },
          {
            "label": "Method",
            "name": "method",
            "type": "options",
            "options": [
              {
                "label": "GET",
                "name": "GET"
              },
              {
                "label": "POST",
                "name": "POST"
              },
              {
                "label": "PUT",
                "name": "PUT"
              },
              {
                "label": "DELETE",
                "name": "DELETE"
              },
              {
                "label": "PATCH",
                "name": "PATCH"
              }
            ],
            "default": "GET",
            "id": "httpAgentflow_1-input-method-options",
            "display": true
          },
          {
            "label": "URL",
            "name": "url",
            "type": "string",
            "id": "httpAgentflow_1-input-url-string",
            "display": true
          },
          {
            "label": "Headers",
            "name": "headers",
            "type": "array",
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "default": ""
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "default": "",
                "acceptVariable": true
              }
            ],
            "optional": true,
            "id": "httpAgentflow_1-input-headers-array",
            "display": true
          },
          {
            "label": "Query Params",
            "name": "queryParams",
            "type": "array",
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "default": ""
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "default": "",
                "acceptVariable": true
              }
            ],
            "optional": true,
            "id": "httpAgentflow_1-input-queryParams-array",
            "display": true
          },
          {
            "label": "Body Type",
            "name": "bodyType",
            "type": "options",
            "options": [
              {
                "label": "JSON",
                "name": "json"
              },
              {
                "label": "Raw",
                "name": "raw"
              },
              {
                "label": "Form Data",
                "name": "formData"
              },
              {
                "label": "x-www-form-urlencoded",
                "name": "xWwwFormUrlencoded"
              }
            ],
            "optional": true,
            "id": "httpAgentflow_1-input-bodyType-options",
            "display": true
          },
          {
            "label": "Body",
            "name": "body",
            "type": "string",
            "acceptVariable": true,
            "rows": 4,
            "show": {
              "bodyType": [
                "raw",
                "json"
              ]
            },
            "optional": true,
            "id": "httpAgentflow_1-input-body-string",
            "display": true
          },
          {
            "label": "Body",
            "name": "body",
            "type": "array",
            "acceptVariable": true,
            "show": {
              "bodyType": [
                "xWwwFormUrlencoded",
                "formData"
              ]
            },
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "default": ""
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "default": "",
                "acceptVariable": true
              }
            ],
            "optional": true,
            "id": "httpAgentflow_1-input-body-array",
            "display": false
          },
          {
            "label": "Response Type",
            "name": "responseType",
            "type": "options",
            "options": [
              {
                "label": "JSON",
                "name": "json"
              },
              {
                "label": "Text",
                "name": "text"
              },
              {
                "label": "Array Buffer",
                "name": "arraybuffer"
              },
              {
                "label": "Raw (Base64)",
                "name": "base64"
              }
            ],
            "optional": true,
            "id": "httpAgentflow_1-input-responseType-options",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "method": "POST",
          "url": "http://presidio-anonymizer:3000/anonymize",
          "headers": [
            {
              "key": "Content-Type",
              "value": "<p>application/json</p>"
            }
          ],
          "queryParams": "",
          "bodyType": "raw",
          "responseType": "json",
          "body": "<p>{</p><p>\"text\": \"<span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_0\" data-label=\"customFunctionAgentflow_0\">{{ customFunctionAgentflow_0 }}</span>\" ,</p><p>\"analyzer_results\": <span class=\"variable\" data-type=\"mention\" data-id=\"httpAgentflow_0\" data-label=\"httpAgentflow_0\">{{ httpAgentflow_0 }}</span></p><p>}</p>"
        },
        "outputAnchors": [
          {
            "id": "httpAgentflow_1-output-httpAgentflow",
            "label": "HTTP",
            "name": "httpAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 183,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 530.1297807354258,
        "y": 46.46026605555231
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_0",
      "position": {
        "x": 63.08857660167703,
        "y": 47.80264428564976
      },
      "data": {
        "id": "customFunctionAgentflow_0",
        "label": "Escape string",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_0-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_0-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_0-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "args",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"agentAgentflow_0\" data-label=\"agentAgentflow_0\">{{ agentAgentflow_0 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\n\nfunction jsonEscape(str) {\n    return str\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\\"/g, '\\\\\"')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\t/g, '\\\\t');\n}\n\ntry {\n    const text = await jsonEscape($args);\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": []
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_0-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 164,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 63.08857660167703,
        "y": 47.80264428564976
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_1",
      "position": {
        "x": 770.4030898872107,
        "y": 46.060535537509395
      },
      "data": {
        "id": "customFunctionAgentflow_1",
        "label": "Unescape string",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_1-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_1-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_1-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "args",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"httpAgentflow_1\" data-label=\"httpAgentflow_1\">{{ httpAgentflow_1 }}</span></p>"
            }
          ],
          "customFunctionJavascriptFunction": "function jsonUnescape(str) {\n    return str\n        .replace(/\\\\\\\\/g, '\\\\')  // \\\\ -> \\\n        .replace(/\\\\\"/g, '\"')    // \\\" -> \"\n        .replace(/\\\\n/g, '\\n')   // \\n -> 개행문자\n        .replace(/\\\\r/g, '\\r')   // \\r -> 캐리지리턴\n        .replace(/\\\\t/g, '\\t');  // \\t -> 탭\n}\n\ntry {\n    console.log('$args: ', $args);\n    const jsonObject = JSON.parse($args);\n\n    console.log('jsonObject: ', jsonObject);\n  \n    const text = await jsonUnescape(jsonObject.text);\n\n    console.log('text: ', text);\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_1-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 182,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 770.4030898872107,
        "y": 46.060535537509395
      },
      "dragging": false
    },
    {
      "id": "httpAgentflow_2",
      "position": {
        "x": 1106.369958841018,
        "y": 48.576193520159165
      },
      "data": {
        "id": "httpAgentflow_2",
        "label": "Send PII guard",
        "version": 1.1,
        "name": "httpAgentflow",
        "type": "HTTP",
        "color": "#FF7F7F",
        "baseClasses": [
          "HTTP"
        ],
        "category": "Agent Flows",
        "description": "Send a HTTP request",
        "inputParams": [
          {
            "label": "HTTP Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "httpBasicAuth",
              "httpBearerToken",
              "httpApiKey"
            ],
            "optional": true,
            "id": "httpAgentflow_2-input-credential-credential",
            "display": true
          },
          {
            "label": "Method",
            "name": "method",
            "type": "options",
            "options": [
              {
                "label": "GET",
                "name": "GET"
              },
              {
                "label": "POST",
                "name": "POST"
              },
              {
                "label": "PUT",
                "name": "PUT"
              },
              {
                "label": "DELETE",
                "name": "DELETE"
              },
              {
                "label": "PATCH",
                "name": "PATCH"
              }
            ],
            "default": "GET",
            "id": "httpAgentflow_2-input-method-options",
            "display": true
          },
          {
            "label": "URL",
            "name": "url",
            "type": "string",
            "id": "httpAgentflow_2-input-url-string",
            "display": true
          },
          {
            "label": "Headers",
            "name": "headers",
            "type": "array",
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "default": ""
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "default": "",
                "acceptVariable": true
              }
            ],
            "optional": true,
            "id": "httpAgentflow_2-input-headers-array",
            "display": true
          },
          {
            "label": "Query Params",
            "name": "queryParams",
            "type": "array",
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "default": ""
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "default": "",
                "acceptVariable": true
              }
            ],
            "optional": true,
            "id": "httpAgentflow_2-input-queryParams-array",
            "display": true
          },
          {
            "label": "Body Type",
            "name": "bodyType",
            "type": "options",
            "options": [
              {
                "label": "JSON",
                "name": "json"
              },
              {
                "label": "Raw",
                "name": "raw"
              },
              {
                "label": "Form Data",
                "name": "formData"
              },
              {
                "label": "x-www-form-urlencoded",
                "name": "xWwwFormUrlencoded"
              }
            ],
            "optional": true,
            "id": "httpAgentflow_2-input-bodyType-options",
            "display": true
          },
          {
            "label": "Body",
            "name": "body",
            "type": "string",
            "acceptVariable": true,
            "rows": 4,
            "show": {
              "bodyType": [
                "raw",
                "json"
              ]
            },
            "optional": true,
            "id": "httpAgentflow_2-input-body-string",
            "display": true
          },
          {
            "label": "Body",
            "name": "body",
            "type": "array",
            "acceptVariable": true,
            "show": {
              "bodyType": [
                "xWwwFormUrlencoded",
                "formData"
              ]
            },
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "default": ""
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "default": "",
                "acceptVariable": true
              }
            ],
            "optional": true,
            "id": "httpAgentflow_2-input-body-array",
            "display": false
          },
          {
            "label": "Response Type",
            "name": "responseType",
            "type": "options",
            "options": [
              {
                "label": "JSON",
                "name": "json"
              },
              {
                "label": "Text",
                "name": "text"
              },
              {
                "label": "Array Buffer",
                "name": "arraybuffer"
              },
              {
                "label": "Raw (Base64)",
                "name": "base64"
              }
            ],
            "optional": true,
            "id": "httpAgentflow_2-input-responseType-options",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "method": "POST",
          "url": "http://pi-detector-all-in-app-api:80/api/jobs/flush",
          "headers": [
            {
              "key": "Content-Type",
              "value": "<p>application/json</p>"
            }
          ],
          "queryParams": "",
          "bodyType": "raw",
          "responseType": "",
          "body": "<p>{</p><p>\"version\": \"1.0.0\",</p><p>\"logs\": [</p><p>\"<span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_1\" data-label=\"customFunctionAgentflow_1\">{{ customFunctionAgentflow_1 }}</span> \"</p><p>]</p><p>}</p>"
        },
        "outputAnchors": [
          {
            "id": "httpAgentflow_2-output-httpAgentflow",
            "label": "HTTP",
            "name": "httpAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 170,
      "height": 66,
      "selected": false,
      "positionAbsolute": {
        "x": 1106.369958841018,
        "y": 48.576193520159165
      },
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "startAgentflow_0",
      "sourceHandle": "startAgentflow_0-output-startAgentflow",
      "target": "agentAgentflow_0",
      "targetHandle": "agentAgentflow_0",
      "data": {
        "sourceColor": "#7EE787",
        "targetColor": "#4DD0E1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "startAgentflow_0-startAgentflow_0-output-startAgentflow-agentAgentflow_0-agentAgentflow_0"
    },
    {
      "source": "httpAgentflow_0",
      "sourceHandle": "httpAgentflow_0-output-httpAgentflow",
      "target": "httpAgentflow_1",
      "targetHandle": "httpAgentflow_1",
      "data": {
        "sourceColor": "#FF7F7F",
        "targetColor": "#FF7F7F",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "httpAgentflow_0-httpAgentflow_0-output-httpAgentflow-httpAgentflow_1-httpAgentflow_1"
    },
    {
      "source": "agentAgentflow_0",
      "sourceHandle": "agentAgentflow_0-output-agentAgentflow",
      "target": "customFunctionAgentflow_0",
      "targetHandle": "customFunctionAgentflow_0",
      "data": {
        "sourceColor": "#4DD0E1",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "agentAgentflow_0-agentAgentflow_0-output-agentAgentflow-customFunctionAgentflow_0-customFunctionAgentflow_0"
    },
    {
      "source": "customFunctionAgentflow_0",
      "sourceHandle": "customFunctionAgentflow_0-output-customFunctionAgentflow",
      "target": "httpAgentflow_0",
      "targetHandle": "httpAgentflow_0",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FF7F7F",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_0-customFunctionAgentflow_0-output-customFunctionAgentflow-httpAgentflow_0-httpAgentflow_0"
    },
    {
      "source": "httpAgentflow_1",
      "sourceHandle": "httpAgentflow_1-output-httpAgentflow",
      "target": "customFunctionAgentflow_1",
      "targetHandle": "customFunctionAgentflow_1",
      "data": {
        "sourceColor": "#FF7F7F",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "httpAgentflow_1-httpAgentflow_1-output-httpAgentflow-customFunctionAgentflow_1-customFunctionAgentflow_1"
    },
    {
      "source": "customFunctionAgentflow_1",
      "sourceHandle": "customFunctionAgentflow_1-output-customFunctionAgentflow",
      "target": "directReplyAgentflow_0",
      "targetHandle": "directReplyAgentflow_0",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#4DDBBB",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_1-customFunctionAgentflow_1-output-customFunctionAgentflow-directReplyAgentflow_0-directReplyAgentflow_0"
    },
    {
      "source": "customFunctionAgentflow_1",
      "sourceHandle": "customFunctionAgentflow_1-output-customFunctionAgentflow",
      "target": "httpAgentflow_2",
      "targetHandle": "httpAgentflow_2",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FF7F7F",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_1-customFunctionAgentflow_1-output-customFunctionAgentflow-httpAgentflow_2-httpAgentflow_2"
    }
  ]
}